/*
   This file was generated automatically by the Mojo IDE version B1.3.3.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module mojo_top_0 (
    input clk,
    input clk_new,
    input rst_n,
    output reg [7:0] led,
    input cclk,
    output reg spi_miso,
    input spi_ss,
    input spi_mosi,
    input spi_sck,
    output reg [3:0] spi_channel,
    input avr_tx,
    output reg avr_rx,
    input avr_rx_busy,
    output reg a_in,
    output reg b_in,
    output reg c_in,
    input s_out,
    input c_out
  );
  
  
  
  reg rst;
  
  reg [2:0] adder_input;
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_1 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  wire [1-1:0] M_myBlinker_blink;
  wire [27-1:0] M_myBlinker_hold_time;
  blinker_2 myBlinker (
    .clk(clk),
    .rst(rst),
    .blink(M_myBlinker_blink),
    .hold_time(M_myBlinker_hold_time)
  );
  localparam FFF_state = 4'd0;
  localparam FFT_state = 4'd1;
  localparam FTF_state = 4'd2;
  localparam FTT_state = 4'd3;
  localparam TFF_state = 4'd4;
  localparam TFT_state = 4'd5;
  localparam TTF_state = 4'd6;
  localparam TTT_state = 4'd7;
  localparam PASS_state = 4'd8;
  
  reg [3:0] M_state_d, M_state_q = FFF_state;
  
  always @* begin
    M_state_d = M_state_q;
    
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    adder_input = 3'h0;
    led = 8'h00;
    spi_miso = 1'bz;
    spi_channel = 4'bzzzz;
    avr_rx = 1'bz;
    a_in = 1'h0;
    b_in = 1'h0;
    c_in = 1'h0;
    
    case (M_state_q)
      FFF_state: begin
        led[0+0-:1] = M_myBlinker_blink;
        if (s_out == 1'h0 && c_out == 1'h0) begin
          if (M_myBlinker_hold_time == 1'h1) begin
            M_state_d = FFT_state;
          end
        end
      end
      FFT_state: begin
        adder_input = 3'h1;
        a_in = 1'h1;
        led[0+0-:1] = 1'h1;
        led[1+0-:1] = M_myBlinker_blink;
        if (s_out == 1'h1 && c_out == 1'h0) begin
          if (M_myBlinker_hold_time == 1'h1) begin
            M_state_d = FTF_state;
          end
        end
      end
      FTF_state: begin
        adder_input = 3'h2;
        b_in = 1'h1;
        led[0+1-:2] = 2'h3;
        led[2+0-:1] = M_myBlinker_blink;
        if (s_out == 1'h1 && c_out == 1'h0) begin
          if (M_myBlinker_hold_time == 1'h1) begin
            M_state_d = FTT_state;
          end
        end
      end
      FTT_state: begin
        adder_input = 3'h3;
        a_in = 1'h1;
        b_in = 1'h1;
        led[0+2-:3] = 3'h7;
        led[3+0-:1] = M_myBlinker_blink;
        if (s_out == 1'h0 && c_out == 1'h1) begin
          if (M_myBlinker_hold_time == 1'h1) begin
            M_state_d = TFF_state;
          end
        end
      end
      TFF_state: begin
        adder_input = 3'h4;
        c_in = 1'h1;
        led[0+3-:4] = 4'hf;
        led[4+0-:1] = M_myBlinker_blink;
        if (s_out == 1'h1 && c_out == 1'h0) begin
          if (M_myBlinker_hold_time == 1'h1) begin
            M_state_d = TFT_state;
          end
        end
      end
      TFT_state: begin
        adder_input = 3'h5;
        a_in = 1'h1;
        c_in = 1'h1;
        led[0+4-:5] = 5'h1f;
        led[5+0-:1] = M_myBlinker_blink;
        if (s_out == 1'h0 && c_out == 1'h1) begin
          if (M_myBlinker_hold_time == 1'h1) begin
            M_state_d = TTF_state;
          end
        end
      end
      TTF_state: begin
        adder_input = 3'h6;
        c_in = 1'h1;
        b_in = 1'h1;
        led[0+5-:6] = 6'h3f;
        led[6+0-:1] = M_myBlinker_blink;
        if (s_out == 1'h0 && c_out == 1'h1) begin
          if (M_myBlinker_hold_time == 1'h1) begin
            M_state_d = TTT_state;
          end
        end
      end
      TTT_state: begin
        adder_input = 3'h7;
        a_in = 1'h1;
        b_in = 1'h1;
        c_in = 1'h1;
        led[0+6-:7] = 7'h7f;
        led[7+0-:1] = M_myBlinker_blink;
        if (s_out == 1'h1 && c_out == 1'h1) begin
          if (M_myBlinker_hold_time == 1'h1) begin
            M_state_d = PASS_state;
          end
        end
      end
      PASS_state: begin
        led = {4'h8{M_myBlinker_blink}};
      end
    endcase
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_state_q <= 1'h0;
    end else begin
      M_state_q <= M_state_d;
    end
  end
  
endmodule
